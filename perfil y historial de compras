----------------------------------------

# PERFIL CON EDICION DE DATOS SENCILLO

----------------------------------------


<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Perfil de Usuario</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #FFFAF0;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            padding: 40px 30px;
            text-align: center;
            color: white;
        }

        .avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            font-weight: bold;
            backdrop-filter: blur(10px);
            border: 3px solid rgba(255, 255, 255, 0.3);
        }

        .header h1 {
            font-size: 2rem;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .profile-content {
            padding: 40px 30px;
        }

        .section {
            margin-bottom: 40px;
        }

        .section-title {
            font-size: 1.5rem;
            color: #374151;
            margin-bottom: 20px;
            font-weight: 600;
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 10px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 0.95rem;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f9fafb;
        }

        .form-control:focus {
            outline: none;
            border-color: #6366f1;
            background: white;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-control:disabled {
            background: #f3f4f6;
            color: #6b7280;
            cursor: not-allowed;
        }

        .input-group {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            color: #6b7280;
            font-size: 0.9rem;
            padding: 4px 8px;
            border-radius: 4px;
            transition: color 0.3s ease;
        }

        .toggle-password:hover {
            color: #6366f1;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
        }

        .btn-secondary {
            background: #f3f4f6;
            color: #374151;
            border: 2px solid #e5e7eb;
        }

        .btn-secondary:hover {
            background: #e5e7eb;
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

        .button-group {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
        }

        .alert {
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }

        .alert-success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }

        .alert-error {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }

            .button-group {
                flex-direction: column;
            }

            .container {
                margin: 10px;
            }

            .profile-content {
                padding: 30px 20px;
            }
        }

        .edit-mode .form-control:not(:disabled) {
            border-color: #fbbf24;
            background: #fffbeb;
        }

        .password-strength {
            margin-top: 8px;
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            overflow: hidden;
        }

        .password-strength-bar {
            height: 100%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak { background: #ef4444; width: 25%; }
        .strength-fair { background: #f59e0b; width: 50%; }
        .strength-good { background: #10b981; width: 75%; }
        .strength-strong { background: #059669; width: 100%; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="avatar" id="userAvatar">JD</div>
            <h1 id="displayName">Juan Pérez</h1>
            <p>Administrador del Sistema</p>
        </div>

        <div class="profile-content">
            <div class="alert alert-success" id="successAlert">
                Perfil actualizado correctamente
            </div>

            <div class="alert alert-error" id="errorAlert">
                Error al actualizar el perfil
            </div>

            <form id="profileForm">
                <div class="section">
                    <h2 class="section-title">Información Personal</h2>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="firstName">Nombre</label>
                            <input type="text" id="firstName" class="form-control" value="Juan" disabled>
                        </div>

                        <div class="form-group">
                            <label for="lastName">Apellido</label>
                            <input type="text" id="lastName" class="form-control" value="Pérez" disabled>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="email">Correo Electrónico</label>
                        <input type="email" id="email" class="form-control" value="juan.perez@ejemplo.com" disabled>
                    </div>
                </div>

                <div class="section">
                    <h2 class="section-title">Seguridad</h2>

                    <div class="form-group">
                        <label for="currentPassword">Contraseña Actual</label>
                        <div class="input-group">
                            <input type="password" id="currentPassword" class="form-control" value="••••••••" disabled>
                            <button type="button" class="toggle-password" onclick="togglePassword('currentPassword')">Mostrar</button>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="newPassword">Nueva Contraseña</label>
                        <div class="input-group">
                            <input type="password" id="newPassword" class="form-control" placeholder="Ingresa nueva contraseña" disabled>
                            <button type="button" class="toggle-password" onclick="togglePassword('newPassword')">Mostrar</button>
                        </div>
                        <div class="password-strength">
                            <div class="password-strength-bar" id="passwordStrengthBar"></div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">Confirmar Nueva Contraseña</label>
                        <div class="input-group">
                            <input type="password" id="confirmPassword" class="form-control" placeholder="Confirma la nueva contraseña" disabled>
                            <button type="button" class="toggle-password" onclick="togglePassword('confirmPassword')">Mostrar</button>
                        </div>
                    </div>
                </div>

                <div class="button-group">
                    <button type="button" id="editBtn" class="btn btn-primary" onclick="toggleEditMode()">
                        Editar Perfil
                    </button>
                    <button type="button" id="cancelBtn" class="btn btn-secondary" onclick="cancelEdit()" style="display: none;">
                        Cancelar
                    </button>
                    <button type="submit" id="saveBtn" class="btn btn-success" style="display: none;">
                        Guardar Cambios
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Simulación de datos del usuario (en Angular vendría del servicio)
        let userData = {
            firstName: 'Juan',
            lastName: 'Pérez',
            email: 'juan.perez@ejemplo.com',
            currentPassword: '••••••••'
        };

        let isEditMode = false;

        // Función para alternar el modo de edición
        function toggleEditMode() {
            isEditMode = !isEditMode;
            const form = document.getElementById('profileForm');
            const editBtn = document.getElementById('editBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            const saveBtn = document.getElementById('saveBtn');

            const inputs = form.querySelectorAll('.form-control');

            if (isEditMode) {
                // Activar modo edición
                inputs.forEach(input => {
                    if (input.id !== 'currentPassword') {
                        input.disabled = false;
                    }
                });

                form.classList.add('edit-mode');
                editBtn.style.display = 'none';
                cancelBtn.style.display = 'inline-flex';
                saveBtn.style.display = 'inline-flex';

                // Limpiar campos de contraseña
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            } else {
                // Desactivar modo edición
                inputs.forEach(input => input.disabled = true);
                form.classList.remove('edit-mode');
                editBtn.style.display = 'inline-flex';
                cancelBtn.style.display = 'none';
                saveBtn.style.display = 'none';
            }
        }

        // Función para cancelar la edición
        function cancelEdit() {
            // Restaurar valores originales
            document.getElementById('firstName').value = userData.firstName;
            document.getElementById('lastName').value = userData.lastName;
            document.getElementById('email').value = userData.email;
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';

            toggleEditMode();
            hideAlerts();
        }

        // Función para mostrar/ocultar contraseña
        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            const button = field.nextElementSibling;

            if (field.type === 'password') {
                field.type = 'text';
                button.textContent = 'Ocultar';
            } else {
                field.type = 'password';
                button.textContent = 'Mostrar';
            }
        }

        // Función para verificar la fuerza de la contraseña
        function checkPasswordStrength(password) {
            let strength = 0;
            let className = '';

            if (password.length >= 8) strength++;
            if (/[a-z]/.test(password)) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/[0-9]/.test(password)) strength++;
            if (/[^A-Za-z0-9]/.test(password)) strength++;

            switch (strength) {
                case 0:
                case 1:
                    className = '';
                    break;
                case 2:
                    className = 'strength-weak';
                    break;
                case 3:
                    className = 'strength-fair';
                    break;
                case 4:
                    className = 'strength-good';
                    break;
                case 5:
                    className = 'strength-strong';
                    break;
            }

            return className;
        }

        // Función para mostrar alertas
        function showAlert(type, message) {
            hideAlerts();
            const alert = document.getElementById(type + 'Alert');
            if (message) {
                alert.textContent = message;
            }
            alert.style.display = 'block';

            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }

        // Función para ocultar alertas
        function hideAlerts() {
            document.getElementById('successAlert').style.display = 'none';
            document.getElementById('errorAlert').style.display = 'none';
        }

        // Función para actualizar el avatar
        function updateAvatar() {
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const displayName = document.getElementById('displayName');
            const avatar = document.getElementById('userAvatar');

            const fullName = `${firstName} ${lastName}`;
            const initials = `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();

            displayName.textContent = fullName;
            avatar.textContent = initials;
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Listener para verificar fuerza de contraseña
            document.getElementById('newPassword').addEventListener('input', function(e) {
                const strengthBar = document.getElementById('passwordStrengthBar');
                const strengthClass = checkPasswordStrength(e.target.value);

                strengthBar.className = 'password-strength-bar ' + strengthClass;
            });

            // Listener para el formulario
            document.getElementById('profileForm').addEventListener('submit', function(e) {
                e.preventDefault();

                const firstName = document.getElementById('firstName').value.trim();
                const lastName = document.getElementById('lastName').value.trim();
                const email = document.getElementById('email').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Validaciones
                if (!firstName || !lastName || !email) {
                    showAlert('error', 'Por favor, completa todos los campos obligatorios.');
                    return;
                }

                if (!email.includes('@')) {
                    showAlert('error', 'Por favor, ingresa un email válido.');
                    return;
                }

                if (newPassword && newPassword !== confirmPassword) {
                    showAlert('error', 'Las contraseñas no coinciden.');
                    return;
                }

                if (newPassword && newPassword.length < 6) {
                    showAlert('error', 'La contraseña debe tener al menos 6 caracteres.');
                    return;
                }

                // Simular actualización (en Angular usarías un servicio)
                setTimeout(() => {
                    userData.firstName = firstName;
                    userData.lastName = lastName;
                    userData.email = email;

                    updateAvatar();
                    toggleEditMode();
                    showAlert('success', 'Perfil actualizado correctamente.');
                }, 1000);
            });

            // Actualizar avatar inicial
            updateAvatar();
        });
    </script>
</body>
</html>





---------------------------------------------------------

# 🛒 HISTORIAL DE COMPRAS FUNCIONAL CON DATOS DE PRUEBA

---------------------------------------------------------





<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Historial de Compras</title>
  <script defer src="https://unpkg.com/lucide@latest"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    .modal { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 50; }
    .modal.open { display: flex; }
  </style>
</head>
<body class="min-h-screen bg-gray-50 p-4">
  <div class="max-w-6xl mx-auto">
    <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Mi Historial de Compras</h1>
      <p class="text-gray-600">Aquí puedes ver todas tus compras realizadas en nuestra tienda</p>
    </div>
    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
      <div class="flex items-center gap-4">
        <i data-lucide="filter" class="w-5 h-5 text-gray-600"></i>
        <span class="font-medium text-gray-700">Filtrar por estado:</span>
        <div class="flex gap-2" id="filters"></div>
      </div>
    </div>
    <div id="orders" class="space-y-4"></div>
    <div id="no-orders" class="bg-white rounded-lg shadow-sm p-12 text-center hidden">
      <i data-lucide="package" class="w-16 h-16 text-gray-300 mx-auto mb-4"></i>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No hay pedidos</h3>
      <p class="text-gray-600">No se encontraron pedidos con el filtro seleccionado.</p>
    </div>
  </div>
  <div id="modal" class="modal">
    <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-gray-200 flex justify-between items-start">
        <div>
          <h2 id="modal-title" class="text-2xl font-bold text-gray-900"></h2>
          <p id="modal-date" class="text-gray-600 mt-1"></p>
        </div>
        <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600 text-2xl">×</button>
      </div>
      <div class="p-6" id="modal-content"></div>
    </div>
  </div>

  <script>
    const orders = [
      {
        id: 101,
        date: '2024-04-10',
        status: 'Entregado',
        paymentMethod: 'Tarjeta de crédito',
        shippingAddress: 'Calle Falsa 123, Ciudad Ejemplo',
        trackingNumber: 'ABC123456789ES',
        total: 89.97,
        items: [
          { name: 'Auriculares Bluetooth', quantity: 1, price: 29.99, image: '🎙️' },
          { name: 'Funda para móvil', quantity: 2, price: 14.99, image: '📱' },
          { name: 'Cargador rápido', quantity: 1, price: 29.99, image: '⚡' }
        ]
      },
      {
        id: 102,
        date: '2024-05-15',
        status: 'En tránsito',
        paymentMethod: 'PayPal',
        shippingAddress: 'Av. Siempre Viva 742, Springfield',
        trackingNumber: 'XYZ987654321ES',
        total: 59.98,
        items: [
          { name: 'Mouse inalámbrico', quantity: 1, price: 19.99, image: '🖱️' },
          { name: 'Teclado mecánico', quantity: 1, price: 39.99, image: '⌨️' }
        ]
      },
      {
        id: 103,
        date: '2024-03-08',
        status: 'Cancelado',
        paymentMethod: 'Transferencia bancaria',
        shippingAddress: 'Calle Luna 456, Ciudad Noche',
        trackingNumber: null,
        total: 24.99,
        items: [
          { name: 'Taza personalizada', quantity: 1, price: 24.99, image: '☕' }
        ]
      }
    ];

    const filters = ['all', 'entregado', 'en tránsito', 'cancelado'];
    let selectedFilter = 'all';

    function getStatusColor(status) {
      switch (status.toLowerCase()) {
        case 'entregado': return 'bg-green-100 text-green-800';
        case 'en tránsito': return 'bg-blue-100 text-blue-800';
        case 'cancelado': return 'bg-red-100 text-red-800';
        case 'procesando': return 'bg-yellow-100 text-yellow-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function formatDate(dateStr) {
      return new Date(dateStr).toLocaleDateString('es-ES', { year: 'numeric', month: 'long', day: 'numeric' });
    }

    function renderFilters() {
      const filtersContainer = document.getElementById('filters');
      filtersContainer.innerHTML = '';
      filters.forEach(filter => {
        const btn = document.createElement('button');
        btn.textContent = filter === 'all' ? 'Todos' : filter.charAt(0).toUpperCase() + filter.slice(1);
        btn.className = `px-4 py-2 rounded-full text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors`;
        btn.onclick = () => { selectedFilter = filter; renderOrders(); };
        filtersContainer.appendChild(btn);
      });
    }

    function renderOrders() {
      const list = document.getElementById('orders');
      const noOrders = document.getElementById('no-orders');
      list.innerHTML = '';
      const filtered = orders.filter(o => selectedFilter === 'all' || o.status.toLowerCase() === selectedFilter);
      if (filtered.length === 0) {
        noOrders.classList.remove('hidden');
        return;
      } else {
        noOrders.classList.add('hidden');
      }
      filtered.forEach(order => {
        const div = document.createElement('div');
        div.className = 'bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden';
        div.innerHTML = `
          <div class="p-6">
            <div class="flex justify-between items-start mb-4">
              <div>
                <h3 class="text-lg font-semibold text-gray-900 mb-1">Pedido #${order.id}</h3>
                <div class="flex items-center gap-4 text-sm text-gray-600">
                  <div class="flex items-center gap-1">
                    <i data-lucide="calendar" class="w-4 h-4"></i>
                    <span>${formatDate(order.date)}</span>
                  </div>
                  <div class="flex items-center gap-1">
                    <i data-lucide="package" class="w-4 h-4"></i>
                    <span>${order.items.length} producto${order.items.length > 1 ? 's' : ''}</span>
                  </div>
                </div>
              </div>
              <div class="text-right">
                <div class="inline-block px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(order.status)} mb-2">${order.status}</div>
                <div class="text-xl font-bold text-gray-900">€${order.total.toFixed(2)}</div>
              </div>
            </div>
            <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3 mb-4">
              ${order.items.slice(0, 6).map(item => `
                <div class="flex flex-col items-center p-3 bg-gray-50 rounded-lg">
                  <div class="text-2xl mb-1">${item.image}</div>
                  <div class="text-xs text-center text-gray-700 font-medium">${item.name}</div>
                  <div class="text-xs text-gray-500 mt-1">€${item.price} × ${item.quantity}</div>
                </div>`).join('')}
              ${order.items.length > 6 ? `<div class="flex items-center justify-center p-3 bg-gray-100 rounded-lg text-sm text-gray-600">+${order.items.length - 6} más</div>` : ''}
            </div>
            <div class="flex justify-between items-center pt-4 border-t border-gray-200">
              <div class="flex items-center gap-2 text-sm text-gray-600">
                <i data-lucide="credit-card" class="w-4 h-4"></i>
                <span>${order.paymentMethod}</span>
              </div>
              <div class="flex gap-2">
                <button onclick='showDetails(${JSON.stringify(order)})' class="flex items-center gap-1 px-4 py-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors">
                  <i data-lucide="eye" class="w-4 h-4"></i> Ver detalles
                </button>
                ${order.status === 'Entregado' ? `<button class="flex items-center gap-1 px-4 py-2 text-gray-600 hover:bg-gray-50 rounded-lg transition-colors"><i data-lucide="download" class="w-4 h-4"></i>Factura</button>` : ''}
              </div>
            </div>
          </div>`;
        list.appendChild(div);
      });
      lucide.createIcons();
    }

    function showDetails(order) {
      document.getElementById('modal-title').textContent = `Pedido #${order.id}`;
      document.getElementById('modal-date').textContent = `Realizado el ${formatDate(order.date)}`;
      let html = `<div class="mb-6">
        <div class="inline-block px-4 py-2 rounded-full text-sm font-medium ${getStatusColor(order.status)}">${order.status}</div>
        ${order.trackingNumber ? `<p class="text-sm text-gray-600 mt-2">Número de seguimiento: <span class="font-mono">${order.trackingNumber}</span></p>` : ''}
      </div>
      <div class="mb-6">
        <h3 class="font-semibold text-gray-900 mb-3">Productos pedidos</h3>
        <div class="space-y-3">
          ${order.items.map(item => `
            <div class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
              <div class="text-2xl">${item.image}</div>
              <div class="flex-1">
                <div class="font-medium text-gray-900">${item.name}</div>
                <div class="text-sm text-gray-600">Cantidad: ${item.quantity}</div>
              </div>
              <div class="font-semibold text-gray-900">€${(item.price * item.quantity).toFixed(2)}</div>
            </div>`).join('')}
        </div>
      </div>
      <div class="grid md:grid-cols-2 gap-6 mb-6">
        <div>
          <h3 class="font-semibold text-gray-900 mb-2 flex items-center gap-2"><i data-lucide="map-pin" class="w-4 h-4"></i> Dirección de envío</h3>
          <p class="text-gray-600 text-sm">${order.shippingAddress}</p>
        </div>
        <div>
          <h3 class="font-semibold text-gray-900 mb-2 flex items-center gap-2"><i data-lucide="credit-card" class="w-4 h-4"></i> Método de pago</h3>
          <p class="text-gray-600 text-sm">${order.paymentMethod}</p>
        </div>
      </div>
      <div class="border-t border-gray-200 pt-4 flex justify-between items-center">
        <span class="text-lg font-semibold text-gray-900">Total del pedido</span>
        <span class="text-2xl font-bold text-gray-900">€${order.total.toFixed(2)}</span>
      </div>`;
      document.getElementById('modal-content').innerHTML = html;
      document.getElementById('modal').classList.add('open');
      lucide.createIcons();
    }

    function closeModal() {
      document.getElementById('modal').classList.remove('open');
    }

    renderFilters();
    renderOrders();
  </script>
</body>
</html>